---
- name: Create Namespace for Persistent Volumes
  shell: |
    kubectl create namespace {{ _nginx.ingress.namespace }}
  register: create_namespace
  args:
    chdir: "{{ base_path }}/"
  environment:
    PATH: "/usr/local/bin:{{ ansible_env.PATH }}"
- debug: msg={{ create_namespace }}
  when: print_debug == true


- name: Copy NGINX Ingress Helm Config
  template:
    src: "{{ item }}.j2"
    dest: "{{ base_path }}/{{ item }}"
  register: copy_nginx_ingress_helm_config
  with_items:
    - "ingress-nginx-values.yaml"
- debug: msg={{ copy_nginx_ingress_helm_config }}


- name: Install MinIO Console and API NGINX Ingress
  shell: |
    helm install {{ item.nginx_ingress_name }} ingress-nginx/ingress-nginx -n {{ _nginx.ingress.namespace }} \
    --set controller.ingressClass={{ item.ingress_class }} \
    --set controller.ingressClassResource.name={{ item.ingress_class }} \
    --set controller.service.enabled=true \
    --set controller.external.enabled=true \
    --set controller.service.type=LoadBalancer \
    --set controller.service.loadBalancerIP={{ item.ip_addr }}
  register: install_nginx_ingress
  args:
    chdir: "{{ base_path }}"
  environment:
    PATH: "/usr/local/bin:{{ ansible_env.PATH }}"
  with_items:
    - { nginx_ingress_name: "{{ _nginx.ingress.console.name }}", ip_addr: "{{ _nginx.ingress.console.ip_addr }}", ingress_class: "{{ _nginx.ingress.console.class_name }}" }
    - { nginx_ingress_name: "{{ _nginx.ingress.api.name }}",     ip_addr: "{{ _nginx.ingress.api.ip_addr }}",     ingress_class: "{{ _nginx.ingress.api.class_name }}" }
- debug: msg={{ install_nginx_ingress }}


- name: Validate if NGINX Ingress Controller Containers are Running
  shell: |
    kubectl get pod -n {{ _nginx.ingress.namespace }} | grep {{ item.svc }} | awk '{print $3}' | grep Running | wc -l
  register: check_nginx_ingress_controller_container
  until: check_nginx_ingress_controller_container.stdout|int == 1
  retries: 100
  delay: 10
  with_items:
    - { svc: "minio-console-nginx-ingress", replica: "{{ _nginx.ingress.console.replica }}" }
    - { svc: "minio-api-nginx-ingress",     replica: "{{ _nginx.ingress.api.replica }}" }
- debug: msg={{ check_nginx_ingress_controller_container }}
  when: print_debug == true


- name: Validate if NGINX Ingress Controller got IP Address
  shell: |
    kubectl -n {{ _nginx.ingress.namespace }} get svc | grep -v admission | grep nginx-ingress | awk '{print $4}'
  register: check_nginx_ingress_controller_container_ip
  until: check_nginx_ingress_controller_container_ip.stdout.find(item.ip) != -1
  retries: 100
  delay: 10
  with_items:
    - { svc: "minio-console-ingress-nginx", ip: "{{ _nginx.ingress.console.ip_addr }}" }
    - { svc: "minio-api-ingress-nginx",     ip: "{{ _nginx.ingress.api.ip_addr }}" }
- debug: msg={{ check_nginx_ingress_controller_container_ip }}
  when: print_debug == true


- name: Copy NGINX Ingress Config
  template:
    src: "{{ item }}.j2"
    dest: "{{ base_path }}/{{ item }}"
  register: copy_nginx_ingress_config
  with_items:
    - "minio-console-ingress-class.yaml"
    - "create-minio-console-ingress.yaml"
    - "minio-api-ingress-class.yaml"
    - "create-minio-api-ingress.yaml"
- debug: msg={{ copy_nginx_ingress_config }}


- name: Apply NGINX Ingress Class
  shell: |
    kubectl apply -f {{ base_path }}/{{ item }}
  register: apply_nginx_ingress_class
  with_items:
    - "minio-console-ingress-class.yaml"
    - "minio-api-ingress-class.yaml"
  args:
    chdir: "{{ base_path }}"
  environment:
    PATH: "/usr/local/bin:{{ ansible_env.PATH }}"
- debug: msg={{ apply_nginx_ingress_class }}
  when: print_debug == true


- name: Validate if NGINX Controller Adminission is Connected
  shell: |
    nc -zv $(kubectl -n {{ _nginx.ingress.namespace }} get svc | grep {{ item.svc }} | grep controller-admission | awk '{print $3}') 443 2>&1 | grep Connected | awk '{print $2}'
  register: check_nginx_controller_admission
  until: check_nginx_controller_admission.stdout.find(item.string) != -1
  retries: 100
  delay: 10
  with_items:
    - { svc: "minio-console-nginx-ingress", string: "Connected" }
    - { svc: "minio-api-nginx-ingress",     string: "Connected" }
- debug: msg={{ check_nginx_controller_admission }}
  when: print_debug == true


- name: Create MinIO Console and API Ingress
  shell: |
    kubectl apply -f {{ base_path }}/{{ item }}
  register: create_elastic_ingress
  with_items:
    - "create-minio-console-ingress.yaml"
    - "create-minio-api-ingress.yaml"
  args:
    chdir: "{{ base_path }}"
  environment:
    PATH: "/usr/local/bin:{{ ansible_env.PATH }}"
- debug: msg={{ create_elastic_ingress }}
  when: print_debug == true

